generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  phone     String     @unique
  status    UserStatus
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime?  @map("updated_at")

  authLinks AuthLink[]
  polls     Poll[]

  @@map("users")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
}

model AuthLink {
  id        String   @id @default(uuid())
  code      String   @unique
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")

  @@map("auth_links")
}

model Poll {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  userId    String   @map("user_id")

  user    User         @relation(fields: [userId], references: [id])
  options PollOption[]
  votes   Vote[]

  @@map("polls")
}

model PollOption {
  id     String @id @default(uuid())
  title  String
  pollId String @map("poll_id")

  votes Vote[]
  poll  Poll   @relation(fields: [pollId], references: [id])

  @@map("poll_options")
}

model Vote {
  id           Int      @id @default(autoincrement())
  sessionId    String   @map("session_id")
  pollOptionId String   @map("poll_option_id")
  pollId       String   @map("poll_id")
  createdAt    DateTime @default(now()) @map("created_at")

  option PollOption @relation(fields: [pollOptionId], references: [id])
  poll   Poll       @relation(fields: [pollId], references: [id])

  @@unique([sessionId, pollId])
  @@map("votes")
}
